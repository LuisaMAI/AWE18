@model AWE_SS18_Gruppe_1.Models.Thesis

@{
    ViewBag.Title = "Edit";
}

<h2>Bewerten der Thesis</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Thesis</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bachelor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Bachelor)
                    @Html.ValidationMessageFor(model => model.Bachelor, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Master, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Master)
                    @Html.ValidationMessageFor(model => model.Master, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StudentEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StudentEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StudentID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StudentID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Registration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Registration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Registration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Filing, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Filing, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Filing, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Typ, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Typ, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Typ, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Strenghts, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Strenghts, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Strenghts, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Weaknesses, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Weaknesses, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Weaknesses, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Evaluation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Evaluation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Evaluation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContentVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ContentVal, new SelectList(new List<int>() { 1, 2, 3, 4,5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ContentVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LayoutVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.LayoutVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LayoutVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StructureVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.StructureVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StructureVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StyleVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.StyleVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StyleVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LiteraturVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.LiteraturVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LiteraturVal, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.DifficultyVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DifficultyVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DifficultyVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NoveltyVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.NoveltyVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.NoveltyVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.RichnessVal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.RichnessVal, new SelectList(new List<int>() { 1, 2, 3, 4, 5 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RichnessVal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContentWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContentWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContentWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LayoutWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LayoutWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LayoutWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StructureWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StructureWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StructureWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StyleWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StyleWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StyleWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LiteratureWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LiteratureWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LiteratureWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DifficultyWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DifficultyWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DifficultyWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NoveltyWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NoveltyWt, new { htmlAttributes = new {id="NoveltyWt", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NoveltyWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RichnessWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RichnessWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RichnessWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Grade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @Html.DropDownListFor(model => model.Grade, new SelectList(new List<double>() { 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0, 5.0 }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProgrammeID, "ProgrammeID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProgrammeID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProgrammeID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label for="Ergebnis">Notenvorschlag</label>
            <input type="text" class="form-control" id="Ergebnis" readonly>
        </div>
        <div class="form-group">
            <input id="Rechnen" type="button" class="btn btn-default" value="Berechnen">
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Speichern" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Zurück zur Übersicht", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <link rel="stylesheet" href="~/Content/kendo/2018.2.620/kendo.common-bootstrap.core.min.css" />
    <link rel="stylesheet" href="~/Content/kendo/2018.2.620/kendo.bootstrap.min.css" />

    <script src="~/Scripts/kendo/2018.2.620/kendo.ui.core.min.js"></script>
    <script src="~/Scripts/kendo/2018.2.620/cultures/kendo.culture.de-DE.min.js"></script>

    <script>
            $(document).ready(function () {
                // kendo Funktionalität für die DropDownList
                $("#ContentWt").kendoNumericTextBox({
                    decimals: 0,
                    max: 100,
                    min: 1
                   
                });
                $("#LayoutWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#StructureWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#StyleWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#LiteratureWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#DifficultyWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#NoveltyWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#RichnessWt").kendoNumericTextBox({
                    max: 100,
                    min: 1
                });
                $("#Status").kendoDropDownList();
                $("#Typ").kendoDropDownList();
                $("#ContentVal").kendoDropDownList();
                $("#LayoutVal").kendoDropDownList();
                $("#StructureVal").kendoDropDownList();
                $("#StyleVal").kendoDropDownList();
                $("#LiteraturVal").kendoDropDownList();
                $("#DifficultyVal").kendoDropDownList();
                $("#NoveltyVal").kendoDropDownList();
                $("#RichnessVal").kendoDropDownList();
                $("#Grade").kendoDropDownList();
                $("#ProgrammeID").kendoDropDownList();
               
                $("#Registration").kendoDatePicker({
                    culture: "de-DE",
                    value: new Date()
                });
                $("#Filing").kendoDatePicker({
                    culture: "de-DE",
                    value: new Date()
                });



        });


  
    // Berechnung Noten
            $("#Rechnen").click(function () {
                var ContentVal = $("#ContentVal").val();
                var LayoutVal = $("#LayoutVal").val();
                var StructureVal = $("#StructureVal").val();
                var StyleVal = $("#StyleVal").val();
                var LiteratureVal = $("#LiteraturVal").val();
                var DifficultyVal = $("#DifficultyVal").val();
                var NoveltyVal = $("#NoveltyVal").val();
                 var RichnessVal = $("#RichnessVal").val();
                var ContentWt = $("#ContentWt").val();
                var LayoutWt = $("#LayoutWt").val();
                var StructureWt = $("#StructureWt").val();
                var StyleWt = $("#StyleWt").val();
                var LiteratureWt = $("#LiteratureWt").val();
                var DifficultyWt = $("#DifficultyWt").val();
                var NoveltyWt = $("#NoveltyWt").val();
                var RichnessWt = $("#RichnessWt").val();
                var result = 1;
                var Summe = 1;
                Summe = ContentWt*1 + LayoutWt*1 + StructureWt*1 +StyleWt*1 + LiteratureWt*1 + DifficultyWt*1 + NoveltyWt*1 + RichnessWt*1;
                if (Summe != 100) {
                    alert("Die Gewichte sind in Summe größer als 100");
                }

                result  = (ContentVal*ContentWt + LayoutVal*LayoutWt + StructureVal*StructureWt + StyleVal*StyleWt + LiteratureVal*LiteratureWt + DifficultyVal*DifficultyWt + NoveltyVal*NoveltyWt + RichnessVal*RichnessWt) / 100;
                
                if (result == null || result < 0 || result > 5) {
                    alert("keine Berechnung möglich");
                } else {


                    $("#Ergebnis").val(result);
                }
               
        });
    </script>
}

